// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_aqi/account/models/bank_entity.dart';
import 'package:flutter_aqi/account/models/city_entity.dart';
import 'package:flutter_aqi/generated/json/city_entity_helper.dart';
import 'package:flutter_aqi/shop/models/rank_entity.dart';
import 'package:flutter_aqi/generated/json/rank_entity_helper.dart';
import 'package:flutter_aqi/statistics/models/aqi_helper.dart';
import 'package:flutter_aqi/statistics/models/aqi_model.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
      case CityEntity:
			return cityEntityFromJson(data as CityEntity, json) as T;
			case AqiEntity:
			return aqiEntityFromJson(data as AqiEntity, json) as T;
      case EvnEntity:
        return envEntityFromJson(data as EvnEntity, json);
      case AqiItem:
        return aqiItemFromJson(data as AqiItem, json);
      case AqiHourItem:
        return aqiHourItemFromJson(data as AqiHourItem, json);
      case RankEntity:
        return rankEntityFromJson(data as RankEntity, json);
      case City:
        return cityFromJson(data as City, json);
      case RankItem:
        return rankItemFromJson(data as RankItem, json);
    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {		case CityEntity:
			return cityEntityToJson(data as CityEntity);			case RankEntity:
			return rankEntityToJson(data as RankEntity);			    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {		case 'CityEntity':
			return CityEntity().fromJson(json);
      case 'AqiEntity':
        return AqiEntity().fromJson(json);
      case 'RankEntity':
        return RankEntity().fromJson(json);
    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'CityEntity':
			return List<CityEntity>();			case 'RankEntity':
			return List<RankEntity>();			    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}